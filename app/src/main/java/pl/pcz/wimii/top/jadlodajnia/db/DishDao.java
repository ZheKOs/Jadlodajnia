package pl.pcz.wimii.top.jadlodajnia.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import pl.pcz.wimii.top.jadlodajnia.db.Dish;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DISH".
*/
public class DishDao extends AbstractDao<Dish, Long> {

    public static final String TABLENAME = "DISH";

    /**
     * Properties of entity Dish.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Kcal = new Property(2, Integer.class, "kcal", false, "KCAL");
        public final static Property Protein = new Property(3, Integer.class, "protein", false, "PROTEIN");
        public final static Property Fat = new Property(4, Integer.class, "fat", false, "FAT");
        public final static Property Carbohydrates = new Property(5, Integer.class, "carbohydrates", false, "CARBOHYDRATES");
        public final static Property Cellulose = new Property(6, Integer.class, "cellulose", false, "CELLULOSE");
        public final static Property Natrium = new Property(7, Integer.class, "natrium", false, "NATRIUM");
        public final static Property Potassium = new Property(8, Integer.class, "potassium", false, "POTASSIUM");
        public final static Property Calcium = new Property(9, Integer.class, "calcium", false, "CALCIUM");
        public final static Property Iron = new Property(10, Integer.class, "iron", false, "IRON");
        public final static Property Magnesium = new Property(11, Integer.class, "magnesium", false, "MAGNESIUM");
        public final static Property VitA = new Property(12, Integer.class, "vitA", false, "VIT_A");
        public final static Property VitE = new Property(13, Integer.class, "vitE", false, "VIT_E");
        public final static Property VitC = new Property(14, Integer.class, "vitC", false, "VIT_C");
    };

    private DaoSession daoSession;


    public DishDao(DaoConfig config) {
        super(config);
    }
    
    public DishDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"KCAL\" INTEGER," + // 2: kcal
                "\"PROTEIN\" INTEGER," + // 3: protein
                "\"FAT\" INTEGER," + // 4: fat
                "\"CARBOHYDRATES\" INTEGER," + // 5: carbohydrates
                "\"CELLULOSE\" INTEGER," + // 6: cellulose
                "\"NATRIUM\" INTEGER," + // 7: natrium
                "\"POTASSIUM\" INTEGER," + // 8: potassium
                "\"CALCIUM\" INTEGER," + // 9: calcium
                "\"IRON\" INTEGER," + // 10: iron
                "\"MAGNESIUM\" INTEGER," + // 11: magnesium
                "\"VIT_A\" INTEGER," + // 12: vitA
                "\"VIT_E\" INTEGER," + // 13: vitE
                "\"VIT_C\" INTEGER);"); // 14: vitC
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Dish entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Integer kcal = entity.getKcal();
        if (kcal != null) {
            stmt.bindLong(3, kcal);
        }
 
        Integer protein = entity.getProtein();
        if (protein != null) {
            stmt.bindLong(4, protein);
        }
 
        Integer fat = entity.getFat();
        if (fat != null) {
            stmt.bindLong(5, fat);
        }
 
        Integer carbohydrates = entity.getCarbohydrates();
        if (carbohydrates != null) {
            stmt.bindLong(6, carbohydrates);
        }
 
        Integer cellulose = entity.getCellulose();
        if (cellulose != null) {
            stmt.bindLong(7, cellulose);
        }
 
        Integer natrium = entity.getNatrium();
        if (natrium != null) {
            stmt.bindLong(8, natrium);
        }
 
        Integer potassium = entity.getPotassium();
        if (potassium != null) {
            stmt.bindLong(9, potassium);
        }
 
        Integer calcium = entity.getCalcium();
        if (calcium != null) {
            stmt.bindLong(10, calcium);
        }
 
        Integer iron = entity.getIron();
        if (iron != null) {
            stmt.bindLong(11, iron);
        }
 
        Integer magnesium = entity.getMagnesium();
        if (magnesium != null) {
            stmt.bindLong(12, magnesium);
        }
 
        Integer vitA = entity.getVitA();
        if (vitA != null) {
            stmt.bindLong(13, vitA);
        }
 
        Integer vitE = entity.getVitE();
        if (vitE != null) {
            stmt.bindLong(14, vitE);
        }
 
        Integer vitC = entity.getVitC();
        if (vitC != null) {
            stmt.bindLong(15, vitC);
        }
    }

    @Override
    protected void attachEntity(Dish entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Dish readEntity(Cursor cursor, int offset) {
        Dish entity = new Dish( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // kcal
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // protein
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // fat
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // carbohydrates
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // cellulose
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // natrium
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // potassium
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // calcium
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // iron
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // magnesium
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // vitA
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // vitE
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // vitC
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Dish entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setKcal(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setProtein(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFat(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCarbohydrates(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCellulose(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setNatrium(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPotassium(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCalcium(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIron(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setMagnesium(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setVitA(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setVitE(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setVitC(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Dish entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Dish entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
