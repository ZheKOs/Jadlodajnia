package pl.pcz.wimii.top.jadlodajnia.db;

import android.os.Parcel;
import android.os.Parcelable;

import java.util.List;

import de.greenrobot.dao.AbstractDao;
import pl.pcz.wimii.top.jadlodajnia.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DISH".
 */
public class Dish implements Parcelable{

    private Long id;
    /** Not-null value. */
    private String name;
    private Integer kcal;
    private Integer protein;
    private Integer fat;
    private Integer carbohydrates;
    private Integer cellulose;
    private Integer natrium;
    private Integer potassium;
    private Integer calcium;
    private Integer iron;
    private Integer magnesium;
    private Integer vitA;
    private Integer vitE;
    private Integer vitC;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DishDao myDao;

    private List<DishProduct> dishProducts;

    public Dish() {
    }

    public Dish(Long id) {
        this.id = id;
    }

    public Dish(Long id, String name, Integer kcal, Integer protein, Integer fat, Integer carbohydrates, Integer cellulose, Integer natrium, Integer potassium, Integer calcium, Integer iron, Integer magnesium, Integer vitA, Integer vitE, Integer vitC) {
        this.id = id;
        this.name = name;
        this.kcal = kcal;
        this.protein = protein;
        this.fat = fat;
        this.carbohydrates = carbohydrates;
        this.cellulose = cellulose;
        this.natrium = natrium;
        this.potassium = potassium;
        this.calcium = calcium;
        this.iron = iron;
        this.magnesium = magnesium;
        this.vitA = vitA;
        this.vitE = vitE;
        this.vitC = vitC;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDishDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Integer getKcal() {
        return kcal;
    }

    public void setKcal(Integer kcal) {
        this.kcal = kcal;
    }

    public Integer getProtein() {
        return protein;
    }

    public void setProtein(Integer protein) {
        this.protein = protein;
    }

    public Integer getFat() {
        return fat;
    }

    public void setFat(Integer fat) {
        this.fat = fat;
    }

    public Integer getCarbohydrates() {
        return carbohydrates;
    }

    public void setCarbohydrates(Integer carbohydrates) {
        this.carbohydrates = carbohydrates;
    }

    public Integer getCellulose() {
        return cellulose;
    }

    public void setCellulose(Integer cellulose) {
        this.cellulose = cellulose;
    }

    public Integer getNatrium() {
        return natrium;
    }

    public void setNatrium(Integer natrium) {
        this.natrium = natrium;
    }

    public Integer getPotassium() {
        return potassium;
    }

    public void setPotassium(Integer potassium) {
        this.potassium = potassium;
    }

    public Integer getCalcium() {
        return calcium;
    }

    public void setCalcium(Integer calcium) {
        this.calcium = calcium;
    }

    public Integer getIron() {
        return iron;
    }

    public void setIron(Integer iron) {
        this.iron = iron;
    }

    public Integer getMagnesium() {
        return magnesium;
    }

    public void setMagnesium(Integer magnesium) {
        this.magnesium = magnesium;
    }

    public Integer getVitA() {
        return vitA;
    }

    public void setVitA(Integer vitA) {
        this.vitA = vitA;
    }

    public Integer getVitE() {
        return vitE;
    }

    public void setVitE(Integer vitE) {
        this.vitE = vitE;
    }

    public Integer getVitC() {
        return vitC;
    }

    public void setVitC(Integer vitC) {
        this.vitC = vitC;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<DishProduct> getDishProducts() {
        if (dishProducts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DishProductDao targetDao = daoSession.getDishProductDao();
            List<DishProduct> dishProductsNew = targetDao._queryDish_DishProducts(id);
            synchronized (this) {
                if(dishProducts == null) {
                    dishProducts = dishProductsNew;
                }
            }
        }
        return dishProducts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDishProducts() {
        dishProducts = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    //Parcelable part

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(getId());
        dest.writeString(getName());
        dest.writeInt(getKcal());             //kcal
        dest.writeInt(getProtein());          //protein
        dest.writeInt(getFat());              //fat
        dest.writeInt(getCarbohydrates());    //carbohydrates
        dest.writeInt(getCellulose());        //cellulose
        dest.writeInt(getNatrium());          //natrium
        dest.writeInt(getPotassium());        //potassium
        dest.writeInt(getCalcium());          //calcium
//        dest.writeFloat(getPhosphorus());       //phosphorus
        dest.writeInt(getIron());             //iron
        dest.writeInt(getMagnesium());        //magnesium
        dest.writeInt(getVitA());             //vit A
        dest.writeInt(getVitE());             //vit E
        dest.writeInt(getVitC());             //vit C

    }

    // this is used to regenerate your object. All Parcelables must have a CREATOR that implements these two methods
    public static final Parcelable.Creator<Dish> CREATOR = new Parcelable.Creator<Dish>() {
        public Dish createFromParcel(Parcel in) {
            return new Dish(in);
        }

        public Dish[] newArray(int size) {
            return new Dish[size];
        }
    };

    // example constructor that takes a Parcel and gives you an object populated with it's values
    private Dish(Parcel in) {
        setId(in.readLong());
        setName(in.readString());
        setKcal(in.readInt());
        setProtein(in.readInt());
        setFat(in.readInt());
        setCarbohydrates(in.readInt());
        setCellulose(in.readInt());
        setNatrium(in.readInt());
        setPotassium(in.readInt());
        setCalcium(in.readInt());
        setIron(in.readInt());
        setMagnesium(in.readInt());
        setVitA(in.readInt());
        setVitE(in.readInt());
        setVitC(in.readInt());
    }

}
